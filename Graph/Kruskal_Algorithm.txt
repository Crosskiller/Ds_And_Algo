import java.io.*;
import java.util.*;

class Node
{
	int a, b, weight;
	public Node(int x, int y, int w)
	{
		a = x;
		b = y;
		weight = w;
	}
}
class DisjointSet
{
	
	public int size;
	public int a[];
	public DisjointSet(int sz)
	{
		size = sz;
		a = new int[sz];
		makeSet();
	}
	public void makeSet()
	{
		for(int i=0; i<size; i++)
			a[i] = i;
	}
	public int find(int x)
	{
		if(a[x]==x)
			return x;
		return find(a[x]);
	}
	public void union(int x, int y)
	{
		int root1 = find(x);
		int root2 = find(y);
		if(root1!=root2)
		{
			a[root2] = root1;
		}
	}
}
class Main1
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static void main(String[] args) throws IOException 
		{
			//System.out.println("Enter Number of vertices: ");
			//int n = in.nextInt();
			//Directed Graph
			Node Edge[] = new Node[11];
			Edge[0] = new Node(0,1,7);
			Edge[1] = new Node(1,3,9);
			Edge[2] = new Node(0,3,5);
			Edge[3] = new Node(1,2,8);
			Edge[4] = new Node(1,4,7);
			Edge[5] = new Node(2,4,5);
			Edge[6] = new Node(3,4,15);
			Edge[7] = new Node(3,5,6);
			Edge[8] = new Node(4,5,8);
			Edge[9] = new Node(4,6,9);
			Edge[10] = new Node(5,6,11);
			Arrays.sort(Edge, new Comparator<Node>(){
				public int compare(Node a, Node b)
				{
					if(a.weight>b.weight)
						return 1;
					return -1;
				}
			});
			/*for(int i=0; i<10; i++)
			{
				System.out.println(Edge[i].a+" "+Edge[i].b+" "+Edge[i].weight);
			}*/
			ArrayList<Node> S = new ArrayList<Node>();
			DisjointSet set = new DisjointSet(7);
			for(int i=0; i<11; i++)
			{
				if(set.find(Edge[i].a)!=set.find(Edge[i].b))
				{
					S.add(Edge[i]);
					set.union(Edge[i].a, Edge[i].b);
				}
			}
			for(int i=0; i<S.size(); i++)
			{
				System.out.println(S.get(i).a+" "+S.get(i).b+" "+S.get(i).weight);
			}
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }