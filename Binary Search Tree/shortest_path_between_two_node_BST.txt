import java.io.*;
import java.util.*;

class BSTNode
{
	public int data;
	public BSTNode left,right;
	public BSTNode(int data){
		this.data = data;
		left = null;
		right = null;
	}
}
class BST
{
	public BSTNode root;
	public ArrayList<Integer> arr;
	public BST()
	{
		root = null;
		arr = new ArrayList<Integer>();
	}
	public BSTNode insert(BSTNode root, int item)
	{
		BSTNode r = root;
		if(r==null)
			return new BSTNode(item);
		while(r!=null)
		{
			if(r.data>item)
			{
				if(r.left!=null)
					r = r.left;
				else
				{
					r.left = new BSTNode(item);
					break;
				}
			}
			else if(r.data<item)
			{
				if(r.right!=null)
					r = r.right;
				else
				{
					r.right = new BSTNode(item);
					break;
				}
			}
		}
		return root;
	}
	
	public BSTNode LCA(BSTNode root, int a, int b)
	{
		if(root==null)
			return null;
		if(root.data==a || root.data==b)
			return root;
		BSTNode left = LCA(root.left, a, b);
		BSTNode right = LCA(root.right, a, b);
		if(left!=null && right!=null)
			return root;
		else 
			return (left!=null)?left:right;
	}
	public BSTNode findPath(BSTNode root, int a)
	{
		if(root==null)
			return null;
		if(root.data==a)
		{
			arr.add(root.data);
			return root;
		}
		BSTNode left = findPath(root.left, a);
		BSTNode right = findPath(root.right, a);
		if(left!=null)
		{
			arr.add(root.data);
			return left;
		}
		else if(right!=null)
		{
			arr.add(root.data);
			return right;
		}
		return null;
	}
	
}
class Main
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static void main(String[] args) throws IOException 
		{
			BST tree = new BST();
			//input: 6 4 9 2 5 8 10 1 3 7
			//output(inOrder traversal): 1 2 3 4 5 6 7 8 9 10
			System.out.println("Enter No of elements:");
			int n = in.nextInt();
			System.out.println("Enter data:");
			for(int i=0; i<n; i++)
			{
				int item = in.nextInt();
				tree.root = tree.insert(tree.root, item);
			}
			System.out.print("Enter Element 1: ");
			int a = in.nextInt();
			System.out.print("Enter Element 2: ");
			int b = in.nextInt();
			tree.findPath(tree.LCA(tree.root, a, b),a);
			for(int i=0; i<tree.arr.size();i++)
				System.out.println(tree.arr.get(i));
			tree.arr = new ArrayList<Integer>();
			tree.findPath(tree.LCA(tree.root, a, b),b);
			for(int i=tree.arr.size()-2; i>=0; i--)
				System.out.println(tree.arr.get(i));
			
			//out.flush();
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }