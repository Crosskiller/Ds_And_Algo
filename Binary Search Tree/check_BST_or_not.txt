import java.io.*;
import java.util.*;

class BTNode
{
	public int data;
	public BTNode left,right;
	public BTNode(int data){
		this.data = data;
		left = null;
		right = null;
	}
}
class BT
{
	public BTNode root;
	public int prev = Integer.MIN_VALUE;
	public BT()
	{
		root = null;
	}
	public BTNode insert(int a[], int i)
	{
		BTNode r;
		if(i>=a.length)
			return null;
		r = new BTNode(a[i]);
		r.left = insert(a, 2*i+1);
		r.right = insert(a, 2*i+2);
		return r;
	}
	
	public boolean isBST(BTNode root)
	{
		BTNode t = root;  
		if(t == null)
			return true;
		if(!isBST(t.left))
			return false;
		if(t.data<this.prev)
			return false;
		this.prev = t.data;
		if(!isBST(t.right))
			return false;
		return true;
	}
}
class Main1
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static void main(String[] args) throws IOException 
		{
			BT tree = new BT();
			//input: 2 1 3 or 6 4 9 2 5 8 10 1 3 7 or 3 2 4 1(level order)
			System.out.println("Enter No of elements:");
			int n = in.nextInt();
			int a[] = new int[n];
			
			System.out.println("Enter data:");
			for(int i=0; i<n; i++)
				a[i] = in.nextInt();
			tree.root = tree.insert(a, 0);
			System.out.println("Is tree a BST: "+tree.isBST(tree.root));
			//out.flush();
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }