import java.io.*;
import java.util.*;

class Heap
{
	public int count;
	public ArrayList<Integer> arr;
	public Heap()
	{
		arr = new ArrayList<Integer>();
	}
	public int parent(int i)
	{
		if(i==0)
			return -1;
		return (i-1)/2;
	}
	public int rightChild(int i)
	{
		int right = 2*i+2;
		if(i>=0 && right<count)
			return right;
		return -1;
	}
	public int leftChild(int i)
	{
		int left = 2*i+1;
		if(i>=0 && left<count)
			return left;
		return -1;
	}
	public int maxElement()
	{
		return arr.get(0);
	}
	public void perlocateDown(int i)
	{
		int l,r,max = i;
		l = leftChild(i);
		r = rightChild(i);
		//System.out.println(i+" "+l+" "+r);
		if(l!=-1 && arr.get(max)<arr.get(l))
			max = l;
		if(r!=-1 && arr.get(max)<arr.get(r))
			max = r;
		if(max!=i)
		{
			Collections.swap(arr, i, max);
		}
		else
			return;
		perlocateDown(max);
	}
	public void heapify(int a[])
	{
		count = a.length;
		for(int i=0; i<count; i++)
		{
			arr.add(a[i]);
		}
		for(int i = (count-1)/2; i>=0; i--)
		{
			perlocateDown(i);
		}
	}

}
class Main1
{
		static Parser11 in = new Parser11(System.in);
		static  PrintWriter out = new PrintWriter(System.out);
		
		public static void main(String[] args) throws IOException 
		{
			Heap h = new Heap();
			System.out.println("Enter size of array:");
			int n = in.nextInt();
			int a[] = new int[n];
			System.out.println("Enter Data:");
			for(int i=0; i<n; i++)
				a[i] = in.nextInt();
			h.heapify(a);
			System.out.println(h.arr);
			out.flush();
		//end of the code
        }
}
    
    
    
    
    
    
 
    
 
                
                
        
            
            
 
  
 
  
  
 
 
   
 
     class Parser11{
        final private int BUFFER_SIZE = 65536;  // 2^16, a good compromise for some problems
        private InputStream din;    // Underlying input stream
        private byte[] buffer;      // Self-maintained buffer
        private int bufferPointer;  // Current read position in the buffer
        private int bytesRead;      // Effective bytes in the buffer read from the input stream
 
        public Parser11(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        /**
         * Read the next integer from the input stream.
         * @return The next integer.
         * @throws java.io.IOException
         */
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
 
        public String readLine() throws IOException {
            StringBuilder line = new StringBuilder();
            char c;
            while ((c = (char)(read())) != '\n') {
                line.append(c);
            }
            return line.toString();
        }
 
        /**
         * Read the next byte of data from the input stream.
         * @return the next byte of data, or -1 if the end of the stream is reached.
         * @throws IOException if an I/O error occurs.
         */
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        /**
         * Read data from the input stream into the buffer
         * @throws IOException if an I/O error occurs.
         */
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
        public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ') c = read();
        boolean neg = c == '-';
        if (neg) c = read();
        do {
            ret = ret * 10 + c - '0';
            c = read();
        } while (c >= '0' && c <= '9');
        if (neg) return -ret;
        return ret;
    }
    }